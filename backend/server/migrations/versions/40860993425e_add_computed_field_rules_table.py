"""Add computed field rules table

Revision ID: 40860993425e
Revises: e4e95bf18071
Create Date: 2025-09-21 01:37:26.190865

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision: str = '40860993425e'
down_revision: Union[str, Sequence[str], None] = 'e4e95bf18071'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('computed_field_rules',
    sa.Column('id', sa.String(length=64), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('target_field', sa.String(length=255), nullable=False),
    sa.Column('condition', sa.Text(), nullable=True),
    sa.Column('action', sa.Text(), nullable=False),
    sa.Column('rule_type', sa.String(length=50), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("rule_type IN ('formula', 'model_mapping', 'value_assignment')", name=op.f('ck_computed_field_rules_cfr_rule_type_check')),
    sa.CheckConstraint('length(action) >= 1', name=op.f('ck_computed_field_rules_cfr_action_nonempty')),
    sa.CheckConstraint('length(id) >= 1', name=op.f('ck_computed_field_rules_cfr_id_nonempty')),
    sa.CheckConstraint('length(name) >= 1', name=op.f('ck_computed_field_rules_cfr_name_nonempty')),
    sa.CheckConstraint('length(target_field) >= 1', name=op.f('ck_computed_field_rules_cfr_target_field_nonempty')),
    sa.CheckConstraint('priority >= 0', name=op.f('ck_computed_field_rules_cfr_priority_positive')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_computed_field_rules'))
    )
    op.create_index('idx_cfr_active_priority', 'computed_field_rules', ['active', 'priority'], unique=False)
    op.create_index('idx_cfr_target_priority', 'computed_field_rules', ['target_field', 'priority'], unique=False)
    op.drop_table('statements')
    op.drop_table('transactions')
    op.drop_table('transaction_metadata')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('transaction_metadata',
    sa.Column('id', sa.VARCHAR(length=64), nullable=False),
    sa.Column('ingested_columns', sqlite.JSON(), nullable=False),
    sa.Column('computed_columns', sqlite.JSON(), nullable=False),
    sa.Column('created_at', sa.DATETIME(), nullable=False),
    sa.Column('updated_at', sa.DATETIME(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_transaction_metadata'))
    )
    op.create_table('transactions',
    sa.Column('id', sa.VARCHAR(length=64), nullable=False),
    sa.Column('statement_id', sa.VARCHAR(length=64), nullable=False),
    sa.Column('ingested_content', sqlite.JSON(), nullable=False),
    sa.Column('ingested_content_hash', sa.VARCHAR(length=64), nullable=False),
    sa.Column('ingested_at', sa.DATETIME(), nullable=False),
    sa.Column('created_at', sa.DATETIME(), nullable=False),
    sa.Column('computed_content', sqlite.JSON(), nullable=True),
    sa.Column('computed_content_hash', sa.VARCHAR(length=64), nullable=True),
    sa.Column('computed_at', sa.DATETIME(), nullable=True),
    sa.CheckConstraint('length(id) >= 1', name=op.f('ck_transactions_transaction_id_nonempty')),
    sa.CheckConstraint('length(statement_id) >= 1', name=op.f('ck_transactions_transaction_statement_id_nonempty')),
    sa.ForeignKeyConstraint(['statement_id'], ['statements.id'], name=op.f('fk_transactions_statement_id_statements')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_transactions')),
    sa.UniqueConstraint('statement_id', 'ingested_content_hash', name=op.f('uq_transaction_statement_content'))
    )
    op.create_table('statements',
    sa.Column('id', sa.VARCHAR(length=64), nullable=False),
    sa.Column('filename', sa.VARCHAR(length=255), nullable=False),
    sa.Column('file_path', sa.VARCHAR(length=512), nullable=False),
    sa.Column('file_hash', sa.VARCHAR(length=64), nullable=False),
    sa.Column('mime_type', sa.VARCHAR(length=100), nullable=False),
    sa.Column('processed', sa.BOOLEAN(), nullable=False),
    sa.Column('created_at', sa.DATETIME(), nullable=False),
    sa.Column('columns', sqlite.JSON(), nullable=True),
    sa.CheckConstraint('length(file_path) >= 1', name=op.f('ck_statements_statement_filepath_nonempty')),
    sa.CheckConstraint('length(filename) >= 1', name=op.f('ck_statements_statement_filename_nonempty')),
    sa.CheckConstraint('length(id) >= 1', name=op.f('ck_statements_statement_id_nonempty')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_statements'))
    )
    op.drop_index('idx_cfr_target_priority', table_name='computed_field_rules')
    op.drop_index('idx_cfr_active_priority', table_name='computed_field_rules')
    op.drop_table('computed_field_rules')
    # ### end Alembic commands ###
